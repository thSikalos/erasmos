const PDFDocument = require('pdfkit');
const ExcelJS = require('exceljs');
const pool = require('../config/db');
const path = require('path');
const BRAND_CONFIG = require('./brandConfig');

// PDF Templates
const PaymentStatementTemplate = require('./pdfTemplates/paymentStatement');
const InvoiceTemplate = require('./pdfTemplates/invoice');
const ReportsPdfTemplate = require('./pdfTemplates/reports');
const LegalCompliancePdfTemplate = require('./pdfTemplates/legalCompliance');

// Excel Templates
const ReportsExcelTemplate = require('./excelTemplates/reports');
const RenewalsTemplate = require('./excelTemplates/renewals');
const LegalComplianceExcelTemplate = require('./excelTemplates/legalCompliance');

class DocumentGenerator {
    constructor() {
        this.brandConfig = BRAND_CONFIG;
        
        // Initialize templates
        this.templates = {
            paymentStatement: new PaymentStatementTemplate(this),
            invoice: new InvoiceTemplate(this),
            reportsPdf: new ReportsPdfTemplate(this),
            reportsExcel: new ReportsExcelTemplate(this),
            renewals: new RenewalsTemplate(this),
            legalCompliancePdf: new LegalCompliancePdfTemplate(this),
            legalComplianceExcel: new LegalComplianceExcelTemplate(this)
        };
    }

    // ===============================
    // USER DATA FETCHING
    // ===============================
    
    async fetchUserDetails(userId) {
        try {
            const query = `
                SELECT 
                    name, 
                    profession, 
                    address, 
                    afm, 
                    phone, 
                    email,
                    role
                FROM users 
                WHERE id = $1
            `;
            const result = await pool.query(query, [userId]);
            
            if (result.rows.length === 0) {
                throw new Error(`User with ID ${userId} not found`);
            }
            
            return result.rows[0];
        } catch (error) {
            console.error('Error fetching user details:', error);
            throw error;
        }
    }

    // ===============================
    // PDF GENERATION CORE
    // ===============================

    createPDFDocument(options = {}) {
        const doc = new PDFDocument({ 
            margin: this.brandConfig.styling.margins.top,
            size: 'A4',
            ...options
        });

        // Register Greek-compatible font
        const fontPath = path.join(__dirname, '../assets/Roboto-Regular.ttf');
        try {
            doc.registerFont('Roboto', fontPath);
            doc.font('Roboto');
        } catch (error) {
            console.warn('Could not load Roboto font, using default');
        }

        return doc;
    }

    addEnterpriseHeader(doc, title, documentNumber = null) {
        const { colors, platform } = this.brandConfig;
        
        // Platform branding header
        doc.fontSize(10)
           .fillColor(colors.primary)
           .text(platform.name, 50, 30, { align: 'right' });

        // Main title
        doc.fontSize(20)
           .fillColor(colors.dark)
           .text(title, 50, 60, { align: 'center' });

        if (documentNumber) {
            doc.fontSize(12)
               .text(`#${documentNumber}`, 50, 85, { align: 'center' });
        }

        // Decorative line
        doc.strokeColor(colors.primary)
           .lineWidth(2)
           .moveTo(50, 110)
           .lineTo(545, 110)
           .stroke();

        return 130; // Return Y position after header
    }

    addEnterpriseFooter(doc, pageInfo = {}) {
        const { colors, platform } = this.brandConfig;
        const pageHeight = doc.page.height;
        const footerY = pageHeight - 50;

        // Footer line
        doc.strokeColor(colors.light)
           .lineWidth(1)
           .moveTo(50, footerY - 10)
           .lineTo(545, footerY - 10)
           .stroke();

        // Platform attribution
        doc.fontSize(8)
           .fillColor(colors.dark)
           .text(`Generated by ${platform.name}`, 50, footerY, { 
               align: 'center',
               width: 495
           });

        // Timestamp
        const now = new Date();
        const timestamp = now.toLocaleDateString('el-GR') + ' ' + now.toLocaleTimeString('el-GR');
        doc.fontSize(7)
           .fillColor(colors.secondary)
           .text(`Δημιουργήθηκε: ${timestamp}`, 50, footerY + 15, { align: 'right' });
    }

    addIssuerDetails(doc, issuerData, startY) {
        const { colors } = this.brandConfig;
        let currentY = startY;

        doc.fontSize(12)
           .fillColor(colors.dark)
           .text('ΑΠΟ (Εκδότης):', 50, currentY, { underline: true });
        
        currentY += 20;

        if (issuerData.name) {
            doc.fontSize(11).text(issuerData.name, 50, currentY);
            currentY += 15;
        }

        if (issuerData.profession) {
            doc.fontSize(10).text(issuerData.profession, 50, currentY);
            currentY += 15;
        }

        if (issuerData.address) {
            doc.fontSize(10).text(`Διεύθυνση: ${issuerData.address}`, 50, currentY);
            currentY += 15;
        }

        if (issuerData.afm) {
            doc.fontSize(10).text(`ΑΦΜ: ${issuerData.afm}`, 50, currentY);
            currentY += 15;
        }

        if (issuerData.phone) {
            doc.fontSize(10).text(`Τηλ: ${issuerData.phone}`, 50, currentY);
            currentY += 15;
        }

        if (issuerData.email) {
            doc.fontSize(10).text(`Email: ${issuerData.email}`, 50, currentY);
            currentY += 15;
        }

        return currentY + 20; // Return Y position after issuer details
    }

    // ===============================
    // EXCEL GENERATION CORE
    // ===============================

    createExcelWorkbook(worksheetName = 'Sheet1') {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet(worksheetName);
        
        return { workbook, worksheet };
    }

    applyEnterpriseExcelStyling(worksheet, headerRow = 1) {
        const { colors } = this.brandConfig;
        
        // Header styling
        const headerCells = worksheet.getRow(headerRow);
        headerCells.eachCell((cell) => {
            cell.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: colors.primary.replace('#', 'FF') }
            };
            cell.font = {
                color: { argb: 'FFFFFFFF' },
                bold: true,
                size: 12
            };
            cell.border = {
                top: { style: 'thin' },
                left: { style: 'thin' },
                bottom: { style: 'thin' },
                right: { style: 'thin' }
            };
            cell.alignment = {
                horizontal: 'center',
                vertical: 'middle'
            };
        });

        // Auto-size columns
        worksheet.columns.forEach((column) => {
            column.width = Math.max(column.width || 10, 15);
        });

        return worksheet;
    }

    // ===============================
    // MAIN GENERATION METHODS
    // ===============================

    async generatePDF(type, data, options = {}) {
        const issuerData = await this.fetchUserDetails(data.issuerId || data.userId);
        
        switch (type) {
            case 'payment_statement':
                return this.generatePaymentStatementPDF(data, issuerData, options);
            case 'invoice':
                return this.generateInvoicePDF(data, issuerData, options);
            case 'reports':
                return this.generateReportsPDF(data, issuerData, options);
            case 'legal_compliance':
                return this.generateLegalCompliancePDF(data, options);
            case 'signed_legal_contract':
                return this.generateSignedLegalContractPDF(data, options);
            default:
                throw new Error(`Unknown PDF type: ${type}`);
        }
    }

    async generateExcel(type, data, options = {}) {
        switch (type) {
            case 'reports':
                return this.generateReportsExcel(data, options);
            case 'renewals':
                return this.generateRenewalsExcel(data, options);
            case 'legal_compliance':
                return this.generateLegalComplianceExcel(data, options);
            default:
                throw new Error(`Unknown Excel type: ${type}`);
        }
    }

    // ===============================
    // PLACEHOLDER METHODS (To be implemented in templates)
    // ===============================

    generatePaymentStatementPDF(data, issuerData, options) {
        return this.templates.paymentStatement.generate(data, issuerData, options);
    }


    generateInvoicePDF(data, issuerData, options) {
        return this.templates.invoice.generate(data, issuerData, options);
    }

    generateReportsPDF(data, issuerData, options) {
        return this.templates.reportsPdf.generate(data, issuerData, options);
    }

    generateReportsExcel(data, options) {
        return this.templates.reportsExcel.generate(data, options);
    }

    generateRenewalsExcel(data, options) {
        return this.templates.renewals.generate(data, options);
    }

    generateLegalCompliancePDF(data, options) {
        return this.templates.legalCompliancePdf.generate(data, options);
    }

    generateLegalComplianceExcel(data, options) {
        return this.templates.legalComplianceExcel.generate(data, options);
    }

    generateSignedLegalContractPDF(data, options) {
        // For now, reuse the legal compliance PDF template with contract-specific data
        // In the future, we can create a specialized signed contract template
        return this.templates.legalCompliancePdf.generateSignedContract(data, options);
    }
}

module.exports = new DocumentGenerator();